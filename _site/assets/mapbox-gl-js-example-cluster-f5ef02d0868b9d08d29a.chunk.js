webpackJsonp(["mapbox-gl-js-example-cluster"],{"9Hf4":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=a(t("DJbt")),s=a(t("scdP"));function a(e){return e&&e.__esModule?e:{default:e}}n.default=(0,o.default)(s.default)},pd4o:function(e,n,t){"use strict";var o=t("9Hf4");o=o.default||o,e.exports={component:o,props:{frontMatter:{title:"Create and style clusters",description:"Use Mapbox GL JS' built-in functions to visualize points as clusters.",tags:["layers"],pathname:"/mapbox-gl-js/example/cluster/"}}}},scdP:function(e,n){e.exports='\n<div id=\'map\'></div>\n\n<script>\nvar map = new mapboxgl.Map({\n    container: \'map\',\n    style: \'mapbox://styles/mapbox/dark-v9\',\n    center: [-103.59179687498357, 40.66995747013945],\n    zoom: 3\n});\n\nmap.on(\'load\', function() {\n    // Add a new source from our GeoJSON data and set the\n    // \'cluster\' option to true. GL-JS will add the point_count property to your source data.\n    map.addSource("earthquakes", {\n        type: "geojson",\n        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n        // from 12/22/15 to 1/21/16 as logged by USGS\' Earthquake hazards program.\n        data: "https://www.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson",\n        cluster: true,\n        clusterMaxZoom: 14, // Max zoom to cluster points on\n        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n    });\n\n    map.addLayer({\n        id: "clusters",\n        type: "circle",\n        source: "earthquakes",\n        filter: ["has", "point_count"],\n        paint: {\n            // Use step expressions (https://www.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n            // with three steps to implement three types of circles:\n            //   * Blue, 20px circles when point count is less than 100\n            //   * Yellow, 30px circles when point count is between 100 and 750\n            //   * Pink, 40px circles when point count is greater than or equal to 750\n            "circle-color": [\n                "step",\n                ["get", "point_count"],\n                "#51bbd6",\n                100,\n                "#f1f075",\n                750,\n                "#f28cb1"\n            ],\n            "circle-radius": [\n                "step",\n                ["get", "point_count"],\n                20,\n                100,\n                30,\n                750,\n                40\n            ]\n        }\n    });\n\n    map.addLayer({\n        id: "cluster-count",\n        type: "symbol",\n        source: "earthquakes",\n        filter: ["has", "point_count"],\n        layout: {\n            "text-field": "{point_count_abbreviated}",\n            "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],\n            "text-size": 12\n        }\n    });\n\n    map.addLayer({\n        id: "unclustered-point",\n        type: "circle",\n        source: "earthquakes",\n        filter: ["!", ["has", "point_count"]],\n        paint: {\n            "circle-color": "#11b4da",\n            "circle-radius": 4,\n            "circle-stroke-width": 1,\n            "circle-stroke-color": "#fff"\n        }\n    });\n\n    // inspect a cluster on click\n    map.on(\'click\', \'clusters\', function (e) {\n        var features = map.queryRenderedFeatures(e.point, { layers: [\'clusters\'] });\n        var clusterId = features[0].properties.cluster_id;\n        map.getSource(\'earthquakes\').getClusterExpansionZoom(clusterId, function (err, zoom) {\n            if (err)\n                return;\n\n            map.easeTo({\n                center: features[0].geometry.coordinates,\n                zoom: zoom\n            });\n        });\n    });\n\n    map.on(\'mouseenter\', \'clusters\', function () {\n        map.getCanvas().style.cursor = \'pointer\';\n    });\n    map.on(\'mouseleave\', \'clusters\', function () {\n        map.getCanvas().style.cursor = \'\';\n    });\n});\n<\/script>\n'}});