webpackJsonp(["mapbox-gl-js-example-mapbox-gl-geocoder-local-geocoder"],{"4qQv":function(e,o,n){"use strict";var a=n("96Je");a=a.default||a,e.exports={component:a,props:{frontMatter:{title:"Supplement geocoding search results from another data source",description:"Use the [mapbox-gl-geocoder](https://github.com/mapbox/mapbox-gl-geocoder) control to search for places using Mapbox Geocoding API, supplementing results from a local data source or function, in this case to match geographic coordinates provided as input.",tags:["geocoder"],pathname:"/mapbox-gl-js/example/mapbox-gl-geocoder-local-geocoder/"}}}},"96Je":function(e,o,n){"use strict";Object.defineProperty(o,"__esModule",{value:!0});var a=r(n("DJbt")),t=r(n("e2MJ"));function r(e){return e&&e.__esModule?e:{default:e}}o.default=(0,a.default)(t.default)},e2MJ:function(e,o){e.exports="<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.3.0/mapbox-gl-geocoder.min.js'><\/script>\n<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.3.0/mapbox-gl-geocoder.css' type='text/css' />\n<div id='map'></div>\n\n<script>\nvar map = new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/streets-v9',\n    center: [-79.4512, 43.6568],\n    zoom: 13\n});\n\n/* given a query in the form \"lng, lat\" or \"lat, lng\" returns the matching\n * geographic coordinate(s) as search results in carmen geojson format,\n * https://github.com/mapbox/carmen/blob/master/carmen-geojson.md\n */\nvar coordinatesGeocoder = function (query) {\n    // match anything which looks like a decimal degrees coordinate pair\n    var matches = query.match(/^[ ]*(?:Lat: )?(-?\\d+\\.?\\d*)[, ]+(?:Lng: )?(-?\\d+\\.?\\d*)[ ]*$/i);\n    if (!matches) {\n        return null;\n    }\n\n    function coordinateFeature(lng, lat) {\n        return {\n            center: [lng, lat],\n            geometry: {\n                type: \"Point\",\n                coordinates: [lng, lat]\n            },\n            place_name: 'Lat: ' + lat + ', Lng: ' + lng, // eslint-disable-line camelcase\n            place_type: ['coordinate'], // eslint-disable-line camelcase\n            properties: {},\n            type: 'Feature'\n        };\n    }\n\n    var coord1 = Number(matches[1]);\n    var coord2 = Number(matches[2]);\n    var geocodes = [];\n\n    if (coord1 < -90 || coord1 > 90) {\n        // must be lng, lat\n        geocodes.push(coordinateFeature(coord1, coord2));\n    }\n\n    if (coord2 < -90 || coord2 > 90) {\n        // must be lat, lng\n        geocodes.push(coordinateFeature(coord2, coord1));\n    }\n\n    if (geocodes.length === 0) {\n        // else could be either lng, lat or lat, lng\n        geocodes.push(coordinateFeature(coord1, coord2));\n        geocodes.push(coordinateFeature(coord2, coord1));\n    }\n\n    return geocodes;\n};\n\nmap.addControl(new MapboxGeocoder({\n    accessToken: mapboxgl.accessToken,\n    localGeocoder: coordinatesGeocoder,\n    zoom: 4,\n    placeholder: \"Try: -40, 170\"\n}));\n<\/script>\n"}});