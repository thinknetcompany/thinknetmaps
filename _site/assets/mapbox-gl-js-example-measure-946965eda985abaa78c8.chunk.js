webpackJsonp(["mapbox-gl-js-example-measure"],{"/elj":function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=i(t("DJbt")),a=i(t("2IK5"));function i(n){return n&&n.__esModule?n:{default:n}}e.default=(0,o.default)(a.default)},"2IK5":function(n,e){n.exports="<style>\n.distance-container {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    z-index: 1;\n}\n\n.distance-container > * {\n    background-color: rgba(0, 0, 0, 0.5);\n    color: #fff;\n    font-size: 11px;\n    line-height: 18px;\n    display: block;\n    margin: 0;\n    padding: 5px 10px;\n    border-radius: 3px;\n}\n</style>\n\n<div id='map'></div>\n<div id='distance' class='distance-container'></div>\n\n<script src='https://api.mapbox.com/mapbox.js/plugins/turf/v2.0.2/turf.min.js'><\/script>\n<script>\nvar map = new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/streets-v9',\n    center: [2.3399, 48.8555],\n    zoom: 12\n});\n\nvar distanceContainer = document.getElementById('distance');\n\n// GeoJSON object to hold our measurement features\nvar geojson = {\n    \"type\": \"FeatureCollection\",\n    \"features\": []\n};\n\n// Used to draw a line between points\nvar linestring = {\n    \"type\": \"Feature\",\n    \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": []\n    }\n};\n\nmap.on('load', function() {\n    map.addSource('geojson', {\n        \"type\": \"geojson\",\n        \"data\": geojson\n    });\n\n    // Add styles to the map\n    map.addLayer({\n        id: 'measure-points',\n        type: 'circle',\n        source: 'geojson',\n        paint: {\n            'circle-radius': 5,\n            'circle-color': '#000'\n        },\n        filter: ['in', '$type', 'Point']\n    });\n    map.addLayer({\n        id: 'measure-lines',\n        type: 'line',\n        source: 'geojson',\n        layout: {\n            'line-cap': 'round',\n            'line-join': 'round'\n        },\n        paint: {\n            'line-color': '#000',\n            'line-width': 2.5\n        },\n        filter: ['in', '$type', 'LineString']\n    });\n\n    map.on('click', function(e) {\n        var features = map.queryRenderedFeatures(e.point, { layers: ['measure-points'] });\n\n        // Remove the linestring from the group\n        // So we can redraw it based on the points collection\n        if (geojson.features.length > 1) geojson.features.pop();\n\n        // Clear the Distance container to populate it with a new value\n        distanceContainer.innerHTML = '';\n\n        // If a feature was clicked, remove it from the map\n        if (features.length) {\n            var id = features[0].properties.id;\n            geojson.features = geojson.features.filter(function(point) {\n                return point.properties.id !== id;\n            });\n        } else {\n            var point = {\n                \"type\": \"Feature\",\n                \"geometry\": {\n                    \"type\": \"Point\",\n                    \"coordinates\": [\n                        e.lngLat.lng,\n                        e.lngLat.lat\n                    ]\n                },\n                \"properties\": {\n                    \"id\": String(new Date().getTime())\n                }\n            };\n\n            geojson.features.push(point);\n        }\n\n        if (geojson.features.length > 1) {\n            linestring.geometry.coordinates = geojson.features.map(function(point) {\n                return point.geometry.coordinates;\n            });\n\n            geojson.features.push(linestring);\n\n            // Populate the distanceContainer with total distance\n            var value = document.createElement('pre');\n            value.textContent = 'Total distance: ' + turf.lineDistance(linestring).toLocaleString() + 'km';\n            distanceContainer.appendChild(value);\n        }\n\n        map.getSource('geojson').setData(geojson);\n    });\n});\n\nmap.on('mousemove', function (e) {\n    var features = map.queryRenderedFeatures(e.point, { layers: ['measure-points'] });\n    // UI indicator for clicking/hovering a point on the map\n    map.getCanvas().style.cursor = (features.length) ? 'pointer' : 'crosshair';\n});\n<\/script>\n"},TYNE:function(n,e,t){"use strict";var o=t("/elj");o=o.default||o,n.exports={component:o,props:{frontMatter:{title:"Measure distances",description:"Click points on a map to create lines that measure distanced using [turf.lineDistance](http://turfjs.org/static/docs/module-turf_line-distance.html).",tags:["user-interaction"],pathname:"/mapbox-gl-js/example/measure/"}}}}});