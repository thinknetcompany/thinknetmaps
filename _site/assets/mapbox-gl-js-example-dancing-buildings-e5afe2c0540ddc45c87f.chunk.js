webpackJsonp(["mapbox-gl-js-example-dancing-buildings"],{P9pj:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=r(t("DJbt")),a=r(t("qqkI"));function r(e){return e&&e.__esModule?e:{default:e}}n.default=(0,i.default)(a.default)},SG74:function(e,n,t){"use strict";var i=t("P9pj");i=i.default||i,e.exports={component:i,props:{frontMatter:{title:"Animate 3D buildings based on ambient sounds",description:"Connects the runtime styling API with the Web Audio API, creating a map where the 3D buildings dance to the rhythm of your ambient environment.",tags:["user-interaction"],pathname:"/mapbox-gl-js/example/dancing-buildings/"}}}},qqkI:function(e,n){e.exports="<div id='map'></div>\n\n<script>\n/* global Promise */\n\n// Use a minimal variant of the Mapbox Dark style, with certain features removed.\nvar map = new mapboxgl.Map({\n    style: 'mapbox://styles/examples/cj68bstx01a3r2rndlud0pwpv',\n    center: {\n        lng: -74.00649562332922,\n        lat: 40.70811328605049\n    },\n    zoom: 15,\n    pitch: 55,\n    container: 'map'\n});\n\nmap.addControl(new mapboxgl.FullscreenControl());\n\nmap.on('load', function() {\n    var bins = 16;\n    var maxHeight = 200;\n    var binWidth = maxHeight / bins;\n\n    // Divide the buildings into 16 bins based on their true height, using a layer filter.\n    for (var i = 0; i < bins; i++) {\n        map.addLayer({\n            'id': '3d-buildings-' + i,\n            'source': 'composite',\n            'source-layer': 'building',\n            'filter': ['all', ['==', 'extrude', 'true'], ['>', 'height', i * binWidth], ['<=', 'height', (i + 1) * binWidth]],\n            'type': 'fill-extrusion',\n            'minzoom': 15,\n            'paint': {\n                'fill-extrusion-color': '#aaa',\n                'fill-extrusion-height-transition': {\n                    duration: 0,\n                    delay: 0\n                },\n                'fill-extrusion-opacity': .6\n            }\n        });\n    }\n\n    // Older browsers might not implement mediaDevices at all, so we set an empty object first\n    if (navigator.mediaDevices === undefined) {\n        navigator.mediaDevices = {};\n    }\n\n    // Some browsers partially implement mediaDevices. We can't just assign an object\n    // with getUserMedia as it would overwrite existing properties.\n    // Here, we will just add the getUserMedia property if it's missing.\n    if (navigator.mediaDevices.getUserMedia === undefined) {\n        navigator.mediaDevices.getUserMedia = function (constraints) {\n\n            // First get ahold of the legacy getUserMedia, if present\n            var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n            // Some browsers just don't implement it - return a rejected promise with an error\n            // to keep a consistent interface\n            if (!getUserMedia) {\n                return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n            }\n\n            // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n            return new Promise(function (resolve, reject) {\n                getUserMedia.call(navigator, constraints, resolve, reject);\n            });\n        };\n    }\n\n    navigator.mediaDevices.getUserMedia({audio: true})\n        .then(function (stream) {\n            // Set up a Web Audio AudioContext and AnalyzerNode, configured to return the\n            // same number of bins of audio frequency data.\n            var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n\n            var analyser = audioCtx.createAnalyser();\n            analyser.minDecibels = -90;\n            analyser.maxDecibels = -10;\n            analyser.smoothingTimeConstant = 0.85;\n\n            var source = audioCtx.createMediaStreamSource(stream);\n            source.connect(analyser);\n\n            analyser.fftSize = bins * 2;\n\n            var dataArray = new Uint8Array(bins);\n\n            function draw(now) {\n                analyser.getByteFrequencyData(dataArray);\n\n                // Use that data to drive updates to the fill-extrusion-height property.\n                var avg = 0;\n                for (var i = 0; i < bins; i++) {\n                    avg += dataArray[i];\n                    map.setPaintProperty('3d-buildings-' + i, 'fill-extrusion-height', 10 + 4 * i + dataArray[i]);\n                }\n                avg /= bins;\n\n                // Animate the map bearing and light color over time, and make the light more\n                // intense when the audio is louder.\n                map.setBearing(now / 500);\n                map.setLight({\n                    color: \"hsl(\" + now / 100 % 360 + \",\" + Math.min(50 + avg / 4, 100) + \"%,50%)\",\n                    intensity: Math.min(1, avg / 256 * 10)\n                });\n\n                requestAnimationFrame(draw);\n            }\n\n            requestAnimationFrame(draw);\n        })\n        .catch(function (err) {\n            console.log('The following gUM error occured: ' + err);\n        });\n});\n<\/script>\n"}});