webpackJsonp(["mapbox-gl-js-example-animate-a-line"],{"97N0":function(n,e,t){"use strict";var a=t("lhTZ");a=a.default||a,n.exports={component:a,props:{frontMatter:{title:"Animate a line",description:"Animate a line by updating a GeoJSON source on each frame.",tags:["layers","sources"],pathname:"/mapbox-gl-js/example/animate-a-line/"}}}},lhTZ:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=o(t("DJbt")),i=o(t("w+V6"));function o(n){return n&&n.__esModule?n:{default:n}}e.default=(0,a.default)(i.default)},"w+V6":function(n,e){n.exports="<style>\nbutton {\n    position: absolute;\n    margin: 20px;\n}\n\n#pause::after {\n    content: 'Pause';\n}\n\n#pause.pause::after {\n    content: 'Play';\n}\n</style>\n<div id='map'></div>\n<button id='pause'></button>\n<script>\nvar map = new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/streets-v10',\n    center: [0, 0],\n    zoom: 0.5\n});\n\n// Create a GeoJSON source with an empty lineString.\nvar geojson = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"LineString\",\n            \"coordinates\": [\n                [0, 0]\n            ]\n        }\n    }]\n};\n\nvar speedFactor = 30; // number of frames per longitude degree\nvar animation; // to store and cancel the animation\nvar startTime = 0;\nvar progress = 0; // progress = timestamp - startTime\nvar resetTime = false; // indicator of whether time reset is needed for the animation\nvar pauseButton = document.getElementById('pause');\n\nmap.on('load', function() {\n\n    // add the line which will be modified in the animation\n    map.addLayer({\n        'id': 'line-animation',\n        'type': 'line',\n        'source': {\n            'type': 'geojson',\n            'data': geojson\n        },\n        'layout': {\n            'line-cap': 'round',\n            'line-join': 'round'\n        },\n        'paint': {\n            'line-color': '#ed6498',\n            'line-width': 5,\n            'line-opacity': .8\n        }\n    });\n\n    startTime = performance.now();\n\n    animateLine();\n\n    // click the button to pause or play\n    pauseButton.addEventListener('click', function() {\n        pauseButton.classList.toggle('pause');\n        if (pauseButton.classList.contains('pause')) {\n            cancelAnimationFrame(animation);\n        } else {\n            resetTime = true;\n            animateLine();\n        }\n    });\n\n    // reset startTime and progress once the tab loses or gains focus\n    // requestAnimationFrame also pauses on hidden tabs by default\n    document.addEventListener('visibilitychange', function() {\n        resetTime = true;\n    });\n\n    // animated in a circle as a sine wave along the map.\n    function animateLine(timestamp) {\n        if (resetTime) {\n            // resume previous progress\n            startTime = performance.now() - progress;\n            resetTime = false;\n        } else {\n            progress = timestamp - startTime;\n        }\n\n        // restart if it finishes a loop\n        if (progress > speedFactor * 360) {\n            startTime = timestamp;\n            geojson.features[0].geometry.coordinates = [];\n        } else {\n            var x = progress / speedFactor;\n            // draw a sine wave with some math.\n            var y = Math.sin(x * Math.PI / 90) * 40;\n            // append new coordinates to the lineString\n            geojson.features[0].geometry.coordinates.push([x, y]);\n            // then update the map\n            map.getSource('line-animation').setData(geojson);\n        }\n        // Request the next frame of the animation.\n        animation = requestAnimationFrame(animateLine);\n    }\n});\n<\/script>\n"}});