webpackJsonp(["mapbox-gl-js-example-filter-features-within-map-view"],{KvE0:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=i(t("DJbt")),a=i(t("QEoY"));function i(e){return e&&e.__esModule?e:{default:e}}n.default=(0,r.default)(a.default)},QEoY:function(e,n){e.exports="<style>\n#map {\n    position:absolute;\n    left:25%;\n    top:0;\n    bottom:0;\n    width: 75%;\n}\n.map-overlay {\n    position: absolute;\n    width: 25%;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n    background-color: #fff;\n    max-height: 100%;\n    overflow: hidden;\n}\n\n.map-overlay fieldset {\n    display: none;\n    background: #ddd;\n    border: none;\n    padding: 10px;\n    margin: 0;\n}\n\n.map-overlay input {\n    display: block;\n    border: none;\n    width: 100%;\n    border-radius: 3px;\n    padding: 10px;\n    margin: 0;\n}\n\n.map-overlay .listing {\n    overflow: auto;\n    max-height: 100%;\n}\n\n.map-overlay .listing > * {\n    display: block;\n    padding: 5px 10px;\n    margin: 0;\n}\n\n.map-overlay .listing a {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n    color: #404;\n    text-decoration: none;\n}\n\n.map-overlay .listing a:last-child {\n    border: none;\n}\n\n.map-overlay .listing a:hover {\n    background: #f0f0f0;\n}\n</style>\n\n<div id='map'></div>\n\n<div class='map-overlay'>\n    <fieldset>\n        <input id='feature-filter' type='text' placeholder='Filter results by name' />\n    </fieldset>\n    <div id='feature-listing' class='listing'></div>\n</div>\n\n<script>\nvar map = new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/streets-v9',\n    center: [-98, 38.88],\n    maxZoom: 5,\n    minZoom: 1,\n    zoom: 3\n});\n\n// Holds visible airport features for filtering\nvar airports = [];\n\n// Create a popup, but don't add it to the map yet.\nvar popup = new mapboxgl.Popup({\n    closeButton: false\n});\n\nvar filterEl = document.getElementById('feature-filter');\nvar listingEl = document.getElementById('feature-listing');\n\nfunction renderListings(features) {\n    // Clear any existing listings\n    listingEl.innerHTML = '';\n    if (features.length) {\n        features.forEach(function(feature) {\n            var prop = feature.properties;\n            var item = document.createElement('a');\n            item.href = prop.wikipedia;\n            item.target = '_blank';\n            item.textContent = prop.name + ' (' + prop.abbrev + ')';\n            item.addEventListener('mouseover', function() {\n                // Highlight corresponding feature on the map\n                popup.setLngLat(feature.geometry.coordinates)\n                    .setText(feature.properties.name + ' (' + feature.properties.abbrev + ')')\n                    .addTo(map);\n            });\n            listingEl.appendChild(item);\n        });\n\n        // Show the filter input\n        filterEl.parentNode.style.display = 'block';\n    } else {\n        var empty = document.createElement('p');\n        empty.textContent = 'Drag the map to populate results';\n        listingEl.appendChild(empty);\n\n        // Hide the filter input\n        filterEl.parentNode.style.display = 'none';\n\n        // remove features filter\n        map.setFilter('airport', ['has', 'abbrev']);\n    }\n}\n\nfunction normalize(string) {\n    return string.trim().toLowerCase();\n}\n\nfunction getUniqueFeatures(array, comparatorProperty) {\n    var existingFeatureKeys = {};\n    // Because features come from tiled vector data, feature geometries may be split\n    // or duplicated across tile boundaries and, as a result, features may appear\n    // multiple times in query results.\n    var uniqueFeatures = array.filter(function(el) {\n        if (existingFeatureKeys[el.properties[comparatorProperty]]) {\n            return false;\n        } else {\n            existingFeatureKeys[el.properties[comparatorProperty]] = true;\n            return true;\n        }\n    });\n\n    return uniqueFeatures;\n}\n\nmap.on('load', function() {\n\n    map.addLayer({\n        \"id\": \"airport\",\n        \"source\": {\n            \"type\": \"vector\",\n            \"url\": \"mapbox://mapbox.04w69w5j\"\n        },\n        \"source-layer\": \"ne_10m_airports\",\n        \"type\": \"symbol\",\n        \"layout\": {\n            \"icon-image\": \"airport-15\",\n            \"icon-padding\": 0,\n            \"icon-allow-overlap\":true\n        }\n    });\n\n    map.on('moveend', function() {\n        var features = map.queryRenderedFeatures({layers:['airport']});\n\n        if (features) {\n            var uniqueFeatures = getUniqueFeatures(features, \"iata_code\");\n            // Populate features for the listing overlay.\n            renderListings(uniqueFeatures);\n\n            // Clear the input container\n            filterEl.value = '';\n\n            // Store the current features in sn `airports` variable to\n            // later use for filtering on `keyup`.\n            airports = uniqueFeatures;\n        }\n    });\n\n    map.on('mousemove', 'airport', function(e) {\n        // Change the cursor style as a UI indicator.\n        map.getCanvas().style.cursor = 'pointer';\n\n        // Populate the popup and set its coordinates based on the feature.\n        var feature = e.features[0];\n        popup.setLngLat(feature.geometry.coordinates)\n            .setText(feature.properties.name + ' (' + feature.properties.abbrev + ')')\n            .addTo(map);\n    });\n\n    map.on('mouseleave', 'airport', function() {\n        map.getCanvas().style.cursor = '';\n        popup.remove();\n    });\n\n    filterEl.addEventListener('keyup', function(e) {\n        var value = normalize(e.target.value);\n\n        // Filter visible features that don't match the input value.\n        var filtered = airports.filter(function(feature) {\n            var name = normalize(feature.properties.name);\n            var code = normalize(feature.properties.abbrev);\n            return name.indexOf(value) > -1 || code.indexOf(value) > -1;\n        });\n\n        // Populate the sidebar with filtered results\n        renderListings(filtered);\n\n        // Set the filter to populate features into the layer.\n        map.setFilter('airport', ['match', ['get', 'abbrev'], filtered.map(function(feature) {\n            return feature.properties.abbrev;\n        }), true, false]);\n    });\n\n    // Call this function on initialization\n    // passing an empty array to render an empty state\n    renderListings([]);\n});\n<\/script>\n"},dzcB:function(e,n,t){"use strict";var r=t("KvE0");r=r.default||r,e.exports={component:r,props:{frontMatter:{title:"Filter features within map view",description:"Move the map to query viewable features in a vector tile layer and filter by typing in an input",tags:["user-interaction"],pathname:"/mapbox-gl-js/example/filter-features-within-map-view/"}}}}});