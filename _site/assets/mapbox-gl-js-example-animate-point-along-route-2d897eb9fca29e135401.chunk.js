webpackJsonp(["mapbox-gl-js-example-animate-point-along-route"],{"0MLW":function(n,e){n.exports='<style>\n.overlay {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n}\n\n.overlay button {\n    font:600 12px/20px \'Helvetica Neue\', Arial, Helvetica, sans-serif;\n    background-color: #3386c0;\n    color: #fff;\n    display: inline-block;\n    margin: 0;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n    border-radius: 3px;\n}\n\n.overlay button:hover {\n    background-color:#4ea0da;\n}\n</style>\n<script src=\'https://api.tiles.mapbox.com/mapbox.js/plugins/turf/v2.0.0/turf.min.js\' charset=\'utf-8\'><\/script>\n\n<div id=\'map\'></div>\n<div class=\'overlay\'>\n    <button id=\'replay\'>Replay</button>\n</div>\n\n<script>\nvar map = new mapboxgl.Map({\n    container: \'map\',\n    style: \'mapbox://styles/mapbox/streets-v9\',\n    center: [-96, 37.8],\n    zoom: 3\n});\n\n// San Francisco\nvar origin = [-122.414, 37.776];\n\n// Washington DC\nvar destination = [-77.032, 38.913];\n\n// A simple line from origin to destination.\nvar route = {\n    "type": "FeatureCollection",\n    "features": [{\n        "type": "Feature",\n        "geometry": {\n            "type": "LineString",\n            "coordinates": [\n                origin,\n                destination\n            ]\n        }\n    }]\n};\n\n// A single point that animates along the route.\n// Coordinates are initially set to origin.\nvar point = {\n    "type": "FeatureCollection",\n    "features": [{\n        "type": "Feature",\n        "properties": {},\n        "geometry": {\n            "type": "Point",\n            "coordinates": origin\n        }\n    }]\n};\n\n// Calculate the distance in kilometers between route start/end point.\nvar lineDistance = turf.lineDistance(route.features[0], \'kilometers\');\n\nvar arc = [];\n\n// Number of steps to use in the arc and animation, more steps means\n// a smoother arc and animation, but too many steps will result in a\n// low frame rate\nvar steps = 500;\n\n// Draw an arc between the `origin` & `destination` of the two points\nfor (var i = 0; i < lineDistance; i += lineDistance / steps) {\n    var segment = turf.along(route.features[0], i, \'kilometers\');\n    arc.push(segment.geometry.coordinates);\n}\n\n// Update the route with calculated arc coordinates\nroute.features[0].geometry.coordinates = arc;\n\n// Used to increment the value of the point measurement against the route.\nvar counter = 0;\n\nmap.on(\'load\', function () {\n    // Add a source and layer displaying a point which will be animated in a circle.\n    map.addSource(\'route\', {\n        "type": "geojson",\n        "data": route\n    });\n\n    map.addSource(\'point\', {\n        "type": "geojson",\n        "data": point\n    });\n\n    map.addLayer({\n        "id": "route",\n        "source": "route",\n        "type": "line",\n        "paint": {\n            "line-width": 2,\n            "line-color": "#007cbf"\n        }\n    });\n\n    map.addLayer({\n        "id": "point",\n        "source": "point",\n        "type": "symbol",\n        "layout": {\n            "icon-image": "airport-15",\n            "icon-rotate": ["get", "bearing"],\n            "icon-rotation-alignment": "map",\n            "icon-allow-overlap": true,\n            "icon-ignore-placement": true\n        }\n    });\n\n    function animate() {\n        // Update point geometry to a new position based on counter denoting\n        // the index to access the arc.\n        point.features[0].geometry.coordinates = route.features[0].geometry.coordinates[counter];\n\n        // Calculate the bearing to ensure the icon is rotated to match the route arc\n        // The bearing is calculate between the current point and the next point, except\n        // at the end of the arc use the previous point and the current point\n        point.features[0].properties.bearing = turf.bearing(\n            turf.point(route.features[0].geometry.coordinates[counter >= steps ? counter - 1 : counter]),\n            turf.point(route.features[0].geometry.coordinates[counter >= steps ? counter : counter + 1])\n        );\n\n        // Update the source with this new data.\n        map.getSource(\'point\').setData(point);\n\n        // Request the next frame of animation so long the end has not been reached.\n        if (counter < steps) {\n            requestAnimationFrame(animate);\n        }\n\n        counter = counter + 1;\n    }\n\n    document.getElementById(\'replay\').addEventListener(\'click\', function() {\n        // Set the coordinates of the original point back to origin\n        point.features[0].geometry.coordinates = origin;\n\n        // Update the source layer\n        map.getSource(\'point\').setData(point);\n\n        // Reset the counter\n        counter = 0;\n\n        // Restart the animation.\n        animate(counter);\n    });\n\n    // Start the animation.\n    animate(counter);\n});\n<\/script>\n'},Ezqd:function(n,e,t){"use strict";var o=t("N56D");o=o.default||o,n.exports={component:o,props:{frontMatter:{title:"Animate a point along a route",description:"Use [Turf](http://turfjs.org/) to smoothly animate a point along the distance of a line.",tags:["animate","camera"],pathname:"/mapbox-gl-js/example/animate-point-along-route/"}}}},N56D:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=r(t("DJbt")),a=r(t("0MLW"));function r(n){return n&&n.__esModule?n:{default:n}}e.default=(0,o.default)(a.default)}});